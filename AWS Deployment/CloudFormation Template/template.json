{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template for creating a distributed Twitter service on EC2 instances.",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
	"TwitterUsername1": {
      "Description": "Twitter Username for the first EC2 instance",
      "Type": "String",
      "Default": "Andrew"
    },
	"TwitterUsername2": {
      "Description": "Twitter Username for the second EC2 instance",
      "Type": "String",
      "Default": "Yi"
    },
	"TwitterUsername3": {
      "Description": "Twitter Username for the third EC2 instance",
      "Type": "String",
      "Default": "Dylan"
    },
	"PrivateIpAddress1": {
      "Description": "The IP address for the first EC2 instance",
      "Type": "String",
      "MinLength": "7",
      "MaxLength": "15",
      "Default": "172.31.32.50",
      "ConstraintDescription": "must be a valid IP in the form of x.x.x.x"
    },
	"PrivateIpAddress2": {
      "Description": "The IP address for the second EC2 instance",
      "Type": "String",
      "MinLength": "7",
      "MaxLength": "15",
      "Default": "172.31.16.50",
      "ConstraintDescription": "must be a valid IP in the form of x.x.x.x"
    },
	"PrivateIpAddress3": {
      "Description": "The IP address for the third EC2 instance",
      "Type": "String",
      "MinLength": "7",
      "MaxLength": "15",
      "Default": "172.31.0.50",
      "ConstraintDescription": "must be a valid IP in the form of x.x.x.x"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.micro": {
        "Arch": "HVM64"
      }
    },
    "AWSInstanceType2NATArch": {
      "t2.micro": {
        "Arch": "NATHVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-west-2": {
        "HVM64": "ami-0cb72367e98845d43"
      }
    }
  },
  "Resources": {
    "EC2Instance1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SGTwitter"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
		"AvailabilityZone": "us-west-2a",
        "PrivateIpAddress": {"Ref": "PrivateIpAddress1"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "sudo yum install python3 -y\n",
				
                "cd home\n",
                "cd ec2-user\n",
                "wget https://github.com/AndrewAltimit/Neural-Net-REST-API-AWS/archive/master.zip\n",
                "unzip master.zip\n",
		"sudo cp -a /home/ec2-user/Neural-Net-REST-API-AWS-master/. /twitter/\n",
                "cd /twitter/src/\n",
				
		"sudo touch /twitter/src/hosts.txt\n",
		"sudo chmod -R 777 .\n",
                {"Fn::Join": ["", ["sudo echo '", {"Ref": "PrivateIpAddress1"}, " ", {"Ref": "TwitterUsername1"}, " 9021 9022 9023\n", {"Ref": "PrivateIpAddress2"}, " ", {"Ref": "TwitterUsername2"}, " 9021 9022 9023\n", {"Ref": "PrivateIpAddress3"}, " ", {"Ref": "TwitterUsername3"}, " 9021 9022 9023\n' | tee hosts.txt\n"]]},
				
		"sudo chmod -R 777 .\n",
				
		"sudo touch /lib/systemd/system/distributedtwitter.service\n",
		"sudo chmod 777 /lib/systemd/system/distributedtwitter.service\n",
				
		"sudo echo -e '[Unit]\n",
		"Description=Distributed Twitter Service\n",
		"After=multi-user.target\n",
		"\n",
		"[Service]\n",
		"Type=idle\n",
		"ExecStart = /usr/bin/python3 /twitter/src/run_server.py\n",
		"Restart=on-failure\n",
		"\n",
		"[Install]\n",
		"WantedBy=multi-user.target ' >> /lib/systemd/system/distributedtwitter.service\n",

		"sudo systemctl daemon-reload\n",
		"sudo systemctl enable distributedtwitter.service\n",
		"sudo systemctl restart distributedtwitter.service\n"
              ]
            ]
          }
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        }
      }
    },
    "EC2Instance2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SGTwitter"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
		"AvailabilityZone": "us-west-2b",
        "PrivateIpAddress": {"Ref": "PrivateIpAddress2"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "sudo yum install python3 -y\n",
				
                "cd home\n",
                "cd ec2-user\n",
                "wget https://github.com/AndrewAltimit/Neural-Net-REST-API-AWS/archive/master.zip\n",
                "unzip master.zip\n",
		"sudo cp -a /home/ec2-user/Neural-Net-REST-API-AWS-master/. /twitter/\n",
                "cd /twitter/src/\n",
				
		"sudo touch /twitter/src/hosts.txt\n",
		"sudo chmod -R 777 .\n",
                {"Fn::Join": ["", ["sudo echo '", {"Ref": "PrivateIpAddress1"}, " ", {"Ref": "TwitterUsername1"}, " 9021 9022 9023\n", {"Ref": "PrivateIpAddress2"}, " ", {"Ref": "TwitterUsername2"}, " 9021 9022 9023\n", {"Ref": "PrivateIpAddress3"}, " ", {"Ref": "TwitterUsername3"}, " 9021 9022 9023\n' | tee hosts.txt\n"]]},

		"sudo chmod -R 777 .\n",

		"sudo touch /lib/systemd/system/distributedtwitter.service\n",
		"sudo chmod 777 /lib/systemd/system/distributedtwitter.service\n",

		"sudo echo -e '[Unit]\n",
		"Description=Distributed Twitter Service\n",
		"After=multi-user.target\n",
		"\n",
		"[Service]\n",
		"Type=idle\n",
		"ExecStart = /usr/bin/python3 /twitter/src/run_server.py\n",
		"Restart=on-failure\n",
		"\n",
		"[Install]\n",
		"WantedBy=multi-user.target ' >> /lib/systemd/system/distributedtwitter.service\n",

		"sudo systemctl daemon-reload\n",
		"sudo systemctl enable distributedtwitter.service\n",
		"sudo systemctl restart distributedtwitter.service\n"
              ]
            ]
          }
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        }
      }
    },
    "EC2Instance3": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SGTwitter"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
		"AvailabilityZone": "us-west-2c",
        "PrivateIpAddress": {"Ref": "PrivateIpAddress3"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "sudo yum install python3 -y\n",
				
                "cd home\n",
                "cd ec2-user\n",
                "wget https://github.com/AndrewAltimit/Neural-Net-REST-API-AWS/archive/master.zip\n",
                "unzip master.zip\n",
		"sudo cp -a /home/ec2-user/Neural-Net-REST-API-AWS-master/. /twitter/\n",
                "cd /twitter/src/\n",
				
		"sudo touch /twitter/src/hosts.txt\n",
		"sudo chmod -R 777 .\n",
                {"Fn::Join": ["", ["sudo echo '", {"Ref": "PrivateIpAddress1"}, " ", {"Ref": "TwitterUsername1"}, " 9021 9022 9023\n", {"Ref": "PrivateIpAddress2"}, " ", {"Ref": "TwitterUsername2"}, " 9021 9022 9023\n", {"Ref": "PrivateIpAddress3"}, " ", {"Ref": "TwitterUsername3"}, " 9021 9022 9023\n' | tee hosts.txt\n"]]},

		"sudo chmod -R 777 .\n",

		"sudo touch /lib/systemd/system/distributedtwitter.service\n",
		"sudo chmod 777 /lib/systemd/system/distributedtwitter.service\n",

		"sudo echo -e '[Unit]\n",
		"Description=Distributed Twitter Service\n",
		"After=multi-user.target\n",
		"\n",
		"[Service]\n",
		"Type=idle\n",
		"ExecStart = /usr/bin/python3 /twitter/src/run_server.py\n",
		"Restart=on-failure\n",
		"\n",
		"[Install]\n",
		"WantedBy=multi-user.target ' >> /lib/systemd/system/distributedtwitter.service\n",

		"sudo systemctl daemon-reload\n",
		"sudo systemctl enable distributedtwitter.service\n",
		"sudo systemctl restart distributedtwitter.service\n"
              ]
            ]
          }
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        }
      }
    },
	
    "SGTwitter": {
		"Type": "AWS::EC2::SecurityGroup",
		"Properties": {
			"GroupDescription": "Enable SSH access via port 22",
			"SecurityGroupIngress": [
				 {
					"IpProtocol": "tcp",
					"CidrIp": { "Ref" : "SSHLocation"},
					"FromPort": 22,
					"ToPort": 22
				 }
			  ]
		}
    },
	
    "SGTwitterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {
          "Ref": "SGTwitter"
        },
        "IpProtocol": "udp",
		"CidrIp": "0.0.0.0/0",
        "FromPort": 9021,
        "ToPort": 9023
      }
    }
  },
  "Outputs": {
    "InstanceId1": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": {
        "Ref": "EC2Instance1"
      }
    },
    "AZ1": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance1",
          "AvailabilityZone"
        ]
      }
    },
    "PublicDNS1": {
      "Description": "Public DNSName of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance1",
          "PublicDnsName"
        ]
      }
    },
    "PublicIP1": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance1",
          "PublicIp"
        ]
      }
    },
    "InstanceId2": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": {
        "Ref": "EC2Instance2"
      }
    },
    "AZ2": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance2",
          "AvailabilityZone"
        ]
      }
    },
    "PublicDNS2": {
      "Description": "Public DNSName of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance2",
          "PublicDnsName"
        ]
      }
    },
    "PublicIP2": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance2",
          "PublicIp"
        ]
      }
    },
    "InstanceId3": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": {
        "Ref": "EC2Instance3"
      }
    },
    "AZ3": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance3",
          "AvailabilityZone"
        ]
      }
    },
    "PublicDNS3": {
      "Description": "Public DNSName of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance3",
          "PublicDnsName"
        ]
      }
    },
    "PublicIP3": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance3",
          "PublicIp"
        ]
      }
    }
  }
}
